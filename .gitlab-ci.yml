variables:
  APP_IMAGE: "${CI_REGISTRY_IMAGE}/app"
  DEPLOY_DIR: "${REMOTE_DIR}" 

stages:
  - test
  - build
  - deploy

before_script:

test:
  stage: test
  #image: ruby:2.5
  image: ruby:2.7
  script:
  - apt-get update -qq && apt-get install -y -qq sqlite3 libsqlite3-dev nodejs
  - bundle config path vendor/bundle
  - bundle install --jobs 4 --retry 3
  - bundle exec rake db:create RAILS_ENV=test
  - bundle exec rake test & bundle exec rspec & bundle exec rubocop --parallel
  cache:
    paths:
      - vendor/bundle
  #except:
  #  variables:
  #    - $CD_TEST_IGNORE

build:
  stage: build
  image: docker:stable
  services:
  - docker:dind
  script:
  # Install bash, curl, git for deployment script
  - apk update && apk add --no-cache bash curl git
  # Install CA certs, openssl to https downloads, python for gcloud sdk
  - apk add --update make ca-certificates openssl python
  - update-ca-certificates
  # Build & push
  - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  - docker build -t "${APP_IMAGE}:release-v2" .
  - docker push "${APP_IMAGE}:release-v2"

  #- ./scripts/image_build.sh $CI_PROJECT_PATH $CI_COMMIT_REF_NAME $CI_COMMIT_SHA

  #only:
  #  refs:
  #    - branches
  #    - tags
  #  variables:
  #    - $CD_DOCKER_USERNAME
  #    - $CD_DOCKER_PASSWORD
  #except:
  #  variables:
  #    - $CD_BUILD_IGNORE

deploy:
  stage: deploy
  image: docker:stable
  services:
  - docker:dind
  script:
  # Install bash, curl, git for deployment script
  #- apk update && apk add --no-cache bash curl git
  - apk update && apk add rsync openssh curl
  # Install CA certs, openssl to https downloads, python for gcloud sdk
  #- apk add --update make ca-certificates openssl python
  #- update-ca-certificates
  # Prepare SSH settings
  - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}" | base64 -d > ~/.ssh/id_ed25519)
  # - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}"> ~/.ssh/id_ed25519)
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  # Prepare files for transfer
  - mkdir ${DEPLOY_DIR}
  - cp docker-compose.server.yml ${DEPLOY_DIR}/docker-compose.yml
  - echo "APP_IMAGE=${APP_IMAGE}" >> ${DEPLOY_DIR}/.env
  # Transfer to server
  - rsync -r ${DEPLOY_DIR} "${REMOTE_HOST}:./"
  # Run commands on the server
  - ssh ${REMOTE_HOST} /bin/bash
    "
    echo 'Starting..';
    cd ~/${DEPLOY_DIR};
    docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY;
    docker-compose pull;
    docker-compose up -d --force-recreate;
    echo "Deleting old images...";
    docker container prune || true;
    docker image prune --force || true;
    "
  

